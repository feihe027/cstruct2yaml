#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
YAML Struct Viewer
For viewing and analyzing YAML files generated by pycparser_yaml_generator
"""

import yaml
import argparse
import sys
from typing import Dict, Any, List, Optional


class YamlStructViewer:
    """YAML struct viewer"""
    
    def __init__(self):
        self.data: Optional[Dict[str, Any]] = None
    
    def load_yaml(self, filename: str) -> bool:
        """Load YAML file"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                self.data = yaml.safe_load(f)
            return True
        except Exception as e:
            print(f"Failed to load YAML file: {e}")
            return False
    
    def print_summary(self) -> None:
        """Print struct summary"""
        if not self.data:
            print("No data")
            return
        
        # Check if it's a single struct or multiple structs
        if 'struct_info' in self.data:
            self._print_single_struct_summary()
        elif 'generation_info' in self.data:
            self._print_multi_struct_summary()
        else:
            print("Unrecognized YAML format")
    
    def _print_single_struct_summary(self) -> None:
        """Print single struct summary"""
        info = self.data['struct_info']
        struct_def = self.data.get('struct_definition', {})
        
        print(f"\n{'='*80}")
        print(f"Struct Analysis Summary")
        print(f"{'='*80}")
        print(f"Name: {info['name']}")
        print(f"Total size: {info['total_size_bits']} bits ({info['total_size_bytes']} bytes)")
        print(f"Alignment: {info['pack_alignment']} bits")
        print(f"Generated at: {info['generated_at']}")
        print(f"Generator: {info['generator']}")
        
        # Statistics of member information
        if 'members' in struct_def:
            members = struct_def['members']
            print(f"\nMain members: {len(members)}")
            
            # Count different types of members
            array_count = sum(1 for m in members if m.get('is_array', False))
            struct_count = sum(1 for m in members if m.get('is_struct', False))
            union_count = sum(1 for m in members if m.get('is_union', False))
            bitfield_count = sum(1 for m in members if m.get('is_bitfield', False))
            anonymous_count = sum(1 for m in members if m.get('is_anonymous', False))
            
            if array_count > 0:
                print(f"  - Array members: {array_count}")
            if struct_count > 0:
                print(f"  - Struct members: {struct_count}")
            if union_count > 0:
                print(f"  - Union members: {union_count}")
            if bitfield_count > 0:
                print(f"  - Bitfield members: {bitfield_count}")
            if anonymous_count > 0:
                print(f"  - Anonymous members: {anonymous_count}")
    
    def _print_multi_struct_summary(self) -> None:
        """Print multi-struct summary"""
        info = self.data['generation_info']
        
        print(f"\n{'='*80}")
        print(f"Batch Struct Analysis Summary")
        print(f"{'='*80}")
        print(f"Struct count: {info['total_structs']}")
        print(f"Union count: {info['total_unions']}")
        print(f"Alignment setting: {info['pack_alignment']} bits")
        print(f"Generated at: {info['generated_at']}")
        print(f"Generator: {info['generator']}")
        
        # List all structs
        if self.data and 'structs' in self.data:
            print(f"\nStruct list:")
            for name, struct_data in self.data['structs'].items():
                size_bits = struct_data.get('size_bits', 0)
                size_bytes = size_bits // 8
                print(f"  - {name}: {size_bits} bits ({size_bytes} bytes)")
        
        if self.data and 'unions' in self.data:
            print(f"\nUnion list:")
            for name, union_data in self.data['unions'].items():
                size_bits = union_data.get('size_bits', 0)
                size_bytes = size_bits // 8
                print(f"  - {name}: {size_bits} bits ({size_bytes} bytes)")
    
    def print_tree_view(self, max_depth: int = 3) -> None:
        """Print tree structure view"""
        if not self.data:
            print("No data")
            return
        
        print(f"\n{'='*80}")
        print(f"Struct Tree View (max depth: {max_depth})")
        print(f"{'='*80}")
        
        if 'struct_definition' in self.data:
            self._print_member_tree(self.data['struct_definition'], 0, max_depth)
        elif 'structs' in self.data:
            for name, struct_data in self.data['structs'].items():
                print(f"\n🏗️  {name}")
                self._print_member_tree(struct_data, 1, max_depth)
    
    def _print_member_tree(self, member_data: Dict[str, Any], depth: int, max_depth: int) -> None:
        """Recursively print member tree"""
        if depth > max_depth:
            return
        
        indent = "  " * depth
        
        if 'members' in member_data:
            for member in member_data['members']:
                name = member.get('name', 'unnamed')
                type_name = member.get('type', 'unknown')
                size_bits = member.get('size_bits', 0)
                size_bytes = size_bits // 8
                
                # Choose icon
                icon = self._get_member_icon(member)
                
                # Build description
                desc_parts = [f"{size_bits}b"]
                if member.get('is_array'):
                    dims = member.get('array_dimensions', [])
                    if dims:
                        desc_parts.append(f"[{']['.join(map(str, dims))}]")
                if member.get('is_bitfield'):
                    bit_width = member.get('bit_width', 0)
                    desc_parts.append(f":{bit_width}")
                if member.get('is_anonymous'):
                    desc_parts.append("anonymous")
                
                desc = f"({', '.join(desc_parts)})"
                
                print(f"{indent}{icon} {name}: {type_name} {desc}")
                
                # Recursively print child members
                if depth < max_depth and 'members' in member:
                    self._print_member_tree(member, depth + 1, max_depth)
    
    def _get_member_icon(self, member: Dict[str, Any]) -> str:
        """Get member icon"""
        if member.get('is_bitfield'):
            return "🔢"
        elif member.get('is_array'):
            return "📋"
        elif member.get('is_struct'):
            return "🏗️"
        elif member.get('is_union'):
            return "🔄"
        elif member.get('is_pointer'):
            return "👉"
        elif member.get('is_anonymous'):
            return "❓"
        else:
            return "📝"
    
    def print_member_list(self, filter_type: Optional[str] = None) -> None:
        """Print member list"""
        if not self.data:
            print("No data")
            return
        
        print(f"\n{'='*80}")
        if filter_type:
            print(f"Member List (filter: {filter_type})")
        else:
            print(f"Member List")
        print(f"{'='*80}")
        print(f"{'Name':<30} | {'Type':<30} | {'Offset':<15} | {'Size':<15} | Description")
        print(f"{'-'*80}")
        
        if 'struct_definition' in self.data:
            self._print_members_flat(self.data['struct_definition'], "", filter_type)
        elif 'structs' in self.data:
            for struct_name, struct_data in self.data['structs'].items():
                print(f"\n📁 {struct_name}:")
                self._print_members_flat(struct_data, "  ", filter_type)
    
    def _print_members_flat(self, member_data: Dict[str, Any], prefix: str, filter_type: Optional[str]) -> None:
        """Recursively print members (flat format)"""
        if 'members' not in member_data:
            return
        
        for member in member_data['members']:
            # Apply filter
            if filter_type:
                if filter_type == 'bitfield' and not member.get('is_bitfield'):
                    continue
                elif filter_type == 'array' and not member.get('is_array'):
                    continue
                elif filter_type == 'struct' and not member.get('is_struct'):
                    continue
                elif filter_type == 'union' and not member.get('is_union'):
                    continue
                elif filter_type == 'anonymous' and not member.get('is_anonymous'):
                    continue
            
            name = prefix + member.get('name', 'unnamed')
            type_name = member.get('type', 'unknown')
            offset_bits = member.get('offset_bits', 0)
            size_bits = member.get('size_bits', 0)
            
            # Build description
            desc_parts = []
            if member.get('is_array'):
                dims = member.get('array_dimensions', [])
                if dims:
                    desc_parts.append(f"Array[{']['.join(map(str, dims))}]")
            if member.get('is_bitfield'):
                bit_width = member.get('bit_width', 0)
                desc_parts.append(f"Bitfield:{bit_width}")
            if member.get('is_anonymous'):
                desc_parts.append("Anonymous")
            if member.get('is_struct'):
                desc_parts.append("Struct")
            if member.get('is_union'):
                desc_parts.append("Union")
            
            desc = ", ".join(desc_parts) if desc_parts else ""
            
            print(f"{name:<30} | {type_name:<30} | {offset_bits:<15} | {size_bits:<15} | {desc}")
            
            # Recursively process child members
            if 'members' in member:
                self._print_members_flat(member, prefix + "  ", filter_type)


def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="YAML Struct Viewer")
    parser.add_argument('yaml_file', help='YAML file path')
    parser.add_argument('-s', '--summary', action='store_true', help='Show summary information')
    parser.add_argument('-t', '--tree', action='store_true', help='Show tree view')
    parser.add_argument('-l', '--list', action='store_true', help='Show member list')
    parser.add_argument('-f', '--filter', choices=['bitfield', 'array', 'struct', 'union', 'anonymous'], 
                       help='Filter member types')
    parser.add_argument('-d', '--depth', type=int, default=3, help='Maximum tree view depth')
    
    args = parser.parse_args()
    
    viewer = YamlStructViewer()
    
    if not viewer.load_yaml(args.yaml_file):
        return 1
    
    # If no options specified, show all information
    if not any([args.summary, args.tree, args.list]):
        args.summary = args.tree = args.list = True
    
    if args.summary:
        viewer.print_summary()
    
    if args.tree:
        viewer.print_tree_view(args.depth)
    
    if args.list:
        viewer.print_member_list(args.filter)
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
